#!/usr/bin/python

import json
import os
import socket
import sys

import loadconf
import config

import debug

"""
how to use:
$ remote -f $(file) -p $(playlist)

$(file) can be a directory or files or a list of files
$(playlist) is a playlist or a list of playlists

Warning:
$ remote -f song_1.mp3 -p play_1 -f song_2.mp3 -p play_2

will add both song_1.mp3 and song_2.mp3 to both play_1 and play_2
"""

help_text = '\n'.join([
    '-h, --help     help',
    '-f             directory, file, or list of files',
    '-p             playlist or a list of playlists',
    '',
    'Note:',
    '$ remote -f song_1.mp3 -p play_1 -f song_2.mp3 -p play_2',
    'will add both song_1.mp3 and song_2.mp3 to both play_1 and play_2',
    ])
    

class Args:
    def __init__(self, argv):

        self.arg_tags = []
        #get each tag and match it with its values
        for arg in argv:
            if arg.startswith('-'):
                self.arg_tags.append(Arg_tag(arg))
            else:
                self.arg_tags[-1].append(arg)

        #sort the list by tag
        self.arg_tags.sort(key=lambda x: x.tag)

        #combine all like tags
        ii = 0
        while ii < (len(self.arg_tags) - 1):
            if self.arg_tags[ii] == self.arg_tags[ii + 1]:
                tmp = self.arg_tags.pop(ii + 1)
                self.arg_tags[ii].values += tmp.values
            else:
                ii += 1

    @classmethod
    def new(cls, argv):
        if not argv[0].startswith('-'):
            return None
        else:
            return cls(argv)

    def __iter__(self):
        return iter(self.arg_tags)

    def get_value(self, tag):
        for arg in self.arg_tags:
            if tag == arg:
                return arg.values
        
class Arg_tag:
    def __init__(self, tag):
        self.tag = tag
        self.values = []

    def __eq__(self, other):
        return self.tag == other
    
    def append(self, value):
        self.values.append(value)
    

def main():
    if len(sys.argv) > 1 and sys.argv[1] in {'-h', '--help'}:
        print(help_text)
        return

    if not os.path.exists(config.SOCKET):
        print('', end='')
        return

    with socket.socket(socket.AF_UNIX, socket.SOCK_STREAM) as s:
        s.connect(config.SOCKET)
        if len(sys.argv) > 1:
            args = Args.new(sys.argv[1:])
            if not args:
                out = {'cmd': ''}
                s.send(json.dumps(out).encode())
                s.recv(4096)
                print('Invalid arguments.')
                return
        else:
            out = {'cmd': ''}
            s.send(json.dumps(out).encode())
            data = s.recv(4096)
            print(data.decode('utf-8'))
            return

        if '-f' in args:
            fn = args.get_value('-f')
            if '-p' in args:
                pl = args.get_value('-p')
            else:
                pl = [config.DEFAULT_PLAYLIST]

            out = {'cmd': 'pl_add', 'playlist': pl, 'file': fn}
            s.send(json.dumps(out).encode())

            data = s.recv(1024)
            #do something with this data maybe idk
            
        elif '-c' in args:
            val = args.get_value('-c')

            if val[0] in {'pause', 'play-pause'}:
                cmd = val[0]
            else:
                cmd = ''
            out = {'cmd': cmd}
            s.send(json.dumps(out).encode())

        else:
            out = {'cmd': ''}
            s.send(json.dumps(out).encode())
            data = s.recv(4096)
            print(data.decode('utf-8'))


if __name__ == '__main__':
    main()
